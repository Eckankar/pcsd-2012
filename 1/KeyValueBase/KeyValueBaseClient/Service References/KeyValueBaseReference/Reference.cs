//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.586
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KeyValueBaseClient.KeyValueBaseReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceAlreadyInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
    [System.SerializableAttribute()]
    public partial class ServiceAlreadyInitializedFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceInitializingFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
    [System.SerializableAttribute()]
    public partial class ServiceInitializingFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyImpl", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase")]
    [System.SerializableAttribute()]
    public partial class KeyImpl : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int KeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Key {
            get {
                return this.KeyField;
            }
            set {
                if ((this.KeyField.Equals(value) != true)) {
                    this.KeyField = value;
                    this.RaisePropertyChanged("Key");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueListImpl", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase")]
    [System.SerializableAttribute()]
    public partial class ValueListImpl : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private KeyValueBaseClient.KeyValueBaseReference.ValueImpl[] ListField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public KeyValueBaseClient.KeyValueBaseReference.ValueImpl[] List {
            get {
                return this.ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ListField, value) != true)) {
                    this.ListField = value;
                    this.RaisePropertyChanged("List");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ValueImpl", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase")]
    [System.SerializableAttribute()]
    public partial class ValueImpl : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
    [System.SerializableAttribute()]
    public partial class ServiceNotInitializedFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KeyValueBaseReference.IKeyValueBaseService")]
    public interface IKeyValueBaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/Init", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/InitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceAlreadyInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/InitServiceAlreadyInitia" +
            "lizedFaultFault", Name="ServiceAlreadyInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceInitializingFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/InitServiceInitializingF" +
            "aultFault", Name="ServiceInitializingFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        void Init(string serverFilename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/Read", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/ReadResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/ReadServiceNotInitialize" +
            "dFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        KeyValueBaseClient.KeyValueBaseReference.ValueListImpl Read(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/Insert", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/InsertResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/InsertServiceNotInitiali" +
            "zedFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        void Insert(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/Update", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/UpdateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/UpdateServiceNotInitiali" +
            "zedFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        void Update(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl newValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/Delete", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/DeleteResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/DeleteServiceNotInitiali" +
            "zedFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        void Delete(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/Scan", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/ScanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/ScanServiceNotInitialize" +
            "dFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.KeyImpl))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueListImpl))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueImpl[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueImpl))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueListImpl[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceAlreadyInitializedFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceInitializingFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<KeyValueBaseClient.KeyValueBaseReference.KeyImpl, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<KeyValueBaseClient.KeyValueBaseReference.KeyImpl, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl>))]
        KeyValueBaseClient.KeyValueBaseReference.ValueListImpl[] Scan(KeyValueBaseClient.KeyValueBaseReference.KeyImpl begin, KeyValueBaseClient.KeyValueBaseReference.KeyImpl end, object predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/AtomicScan", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/AtomicScanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/AtomicScanServiceNotInit" +
            "ializedFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.KeyImpl))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueListImpl))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueImpl[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueImpl))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ValueListImpl[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceAlreadyInitializedFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceInitializingFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<KeyValueBaseClient.KeyValueBaseReference.KeyImpl, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl>[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.KeyValuePair<KeyValueBaseClient.KeyValueBaseReference.KeyImpl, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl>))]
        KeyValueBaseClient.KeyValueBaseReference.ValueListImpl[] AtomicScan(KeyValueBaseClient.KeyValueBaseReference.KeyImpl begin, KeyValueBaseClient.KeyValueBaseReference.KeyImpl end, object predicate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/BulkPut", ReplyAction="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/BulkPutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceNotInitializedFault), Action="http://tempuri.org/IKeyValueBaseOf_KeyImpl_ValueListImpl/BulkPutServiceNotInitial" +
            "izedFaultFault", Name="ServiceNotInitializedFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        void BulkPut(System.Collections.Generic.KeyValuePair<KeyValueBaseClient.KeyValueBaseReference.KeyImpl, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl>[] pairs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKeyValueBaseService/Reset", ReplyAction="http://tempuri.org/IKeyValueBaseService/ResetResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(KeyValueBaseClient.KeyValueBaseReference.ServiceInitializingFault), Action="http://tempuri.org/IKeyValueBaseService/ResetServiceInitializingFaultFault", Name="ServiceInitializingFault", Namespace="http://schemas.datacontract.org/2004/07/KeyValueBase.Faults")]
        void Reset();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKeyValueBaseServiceChannel : KeyValueBaseClient.KeyValueBaseReference.IKeyValueBaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KeyValueBaseServiceClient : System.ServiceModel.ClientBase<KeyValueBaseClient.KeyValueBaseReference.IKeyValueBaseService>, KeyValueBaseClient.KeyValueBaseReference.IKeyValueBaseService {
        
        public KeyValueBaseServiceClient() {
        }
        
        public KeyValueBaseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KeyValueBaseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KeyValueBaseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KeyValueBaseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Init(string serverFilename) {
            base.Channel.Init(serverFilename);
        }
        
        public KeyValueBaseClient.KeyValueBaseReference.ValueListImpl Read(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key) {
            return base.Channel.Read(key);
        }
        
        public void Insert(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl value) {
            base.Channel.Insert(key, value);
        }
        
        public void Update(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl newValue) {
            base.Channel.Update(key, newValue);
        }
        
        public void Delete(KeyValueBaseClient.KeyValueBaseReference.KeyImpl key) {
            base.Channel.Delete(key);
        }
        
        public KeyValueBaseClient.KeyValueBaseReference.ValueListImpl[] Scan(KeyValueBaseClient.KeyValueBaseReference.KeyImpl begin, KeyValueBaseClient.KeyValueBaseReference.KeyImpl end, object predicate) {
            return base.Channel.Scan(begin, end, predicate);
        }
        
        public KeyValueBaseClient.KeyValueBaseReference.ValueListImpl[] AtomicScan(KeyValueBaseClient.KeyValueBaseReference.KeyImpl begin, KeyValueBaseClient.KeyValueBaseReference.KeyImpl end, object predicate) {
            return base.Channel.AtomicScan(begin, end, predicate);
        }
        
        public void BulkPut(System.Collections.Generic.KeyValuePair<KeyValueBaseClient.KeyValueBaseReference.KeyImpl, KeyValueBaseClient.KeyValueBaseReference.ValueListImpl>[] pairs) {
            base.Channel.BulkPut(pairs);
        }
        
        public void Reset() {
            base.Channel.Reset();
        }
    }
}
